#datetime 
  from datetime import datetime
  #tworzenie obiektu daty
  #timestamp 
  datetime.timestamp(obiekt_datetime)
  # tworzenie datetime ze stringa
  date_time_obj = datetime. strptime(date_time_str, '%d/%m/%Y %H:%M:%S')
  
#rabbit mq
  #Install
    sudo apt-get install rabbitmq-server
    sudo systemctl enable rabbitmq-server
    sudo systemctl start rabbitmq-server
    sudo rabbitmq-plugins enable rabbitmq_management
    
  # zmiana hasła dla admina
    sudo rabbitmqctl change_password admin <NEWPASSWORD>
  
  #Create a new administrator account
    rabbitmqctl add_user newadmin s0m3p4ssw0rd
    rabbitmqctl set_user_tags newadmin administrator
    rabbitmqctl set_permissions -p / newadmin ".*" ".*" ".*"
  
  #web interface
    http://ip:15672/
  # python3 -m pip install pika --upgrade
  
  #sender 
  import pika
  connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
  channel = connection.channel()
  channel.queue_declare(queue='wago')
  channel.basic_publish(exchange='', routing_key='wago', body=json.dumps(message))
  
  #consumer - czeka na wiadomość w kolejce i reaguje funkcją callback 
  import pika
  connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost'))
  channel = connection.channel()
  channel.queue_declare(queue='wago')
  def callback(ch, method, properties, body):
    .
    .
  channel.basic_consume(queue='wago', on_message_callback=callback, auto_ack=True)
  
  # consumer - sparawdz czy jest coś w kolejce jezlei tk to regauje 
  connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
  channel = connection.channel()
  channel.queue_declare(queue=que_name)
  
  method, properties, body = next(channel.consume(que_name, auto_ack=True, inactivity_timeout=1))
  if method is None:
    ....
  else :
    odebrane = json.loads(body)
    command_to_vrf(odebrane)
 
#influxdb
  from influxdb import InfluxDBClient
  db_client = InfluxDBClient(influx_host,influx_port,influx_user,influx_password,influx_temp_db_name)
  list(db_client.query('SELECT "bieg" FROM "' + jw +'" WHERE time >= ' + start_timestamp + ' AND time <= ' + stop_timestamp).get_points())
  
  data = [
            {
                
                "measurement": for_db_name,
                "tags": {
                    "location": 'uzupelnic',
                },
                "time": czas,
                "fields": {
                    "temp_tloczenia": TT,
                    "temp_ssania": TS,
                    "bieg": bieg,
                    "tryb":mode,
                    "alarm_code":alarm_c,
                    "shutdown_reason":shutdown_reason
                }
            }
            ]
            #print (data)   
            save = db_client.write_points(data)
  
 #modbus 
    from pyModbusTCP.client import ModbusClient
    G = ModbusClient(host=ip, port=502, unit_id=G_uid, auto_open=True, auto_close= True)
    G.read_input_registers(G_start_reg, G_cout_reg)
    
 #main 
    if __name__ == "__main__":
      main()
    
